import os, sys, shutil, arcpy
import traceback, time

def log(message):
    arcpy.AddMessage(message)
    with file(sys.argv[0]+".log", 'a') as logFile:
        logFile.write("%s:\t%s\n" % (time.asctime(), message))
    
class Toolbox(object):
    def __init__(self):
        self.label = "WIP tools"
        self.alias = ""
        self.tools = [TopoHydro, ImpCov, Runoff]
        
class TopoHydro(object):
    def __init__(self):
        self.label = "Topography and Hydrology Analysis"
        self.description = "Establishes the watershed and stream network"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Input Digital Elevation Model",
            name="DEM",
            datatype="DERasterDataset",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Analysis Mask",
            name="Mask",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        param2 = arcpy.Parameter(
            displayName="Threshold accumulation for Stream formation (acres)",
            name="StreamFormation",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1, param2 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText, parameters[2].valueAsText))
			
			# -*- coding: utf-8 -*-
			# ---------------------------------------------------------------------------
			# Stream_Lab6.py
			# Created on: 2016-03-01 18:19:03.00000
			#   (generated by ArcGIS/ModelBuilder)
			# Description: 
			# ---------------------------------------------------------------------------

			# Import arcpy module
			import arcpy


			# Local variables:
			DEM = "DEM"
			DEM_Fill = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\DEM_Fill"
			AnalysisMask = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\AnalysisMask"
			AnalysisRas = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\AnalysisRas"
			Output_drop_raster = ""
			DEM_fd = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\DEM_fd"
			DEM_fa = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\DEM_fa"
			Accum_acres = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Accum_acres"
			Stream_Ras = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Stream_Ras"
			Stream_Feat = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Stream_Feat"

			# Process: Fill
			tempEnvironment0 = arcpy.env.extent
			arcpy.env.extent = "2008480.2410905 751026.288687245 2056480.2410905 811226.288687245"
			arcpy.gp.Fill_sa(DEM, DEM_Fill, "")
			arcpy.env.extent = tempEnvironment0

			# Process: Polygon to Raster
			arcpy.PolygonToRaster_conversion(AnalysisMask, "OBJECTID", AnalysisRas, "CELL_CENTER", "NONE", "190")

			# Process: Flow Direction
			tempEnvironment0 = arcpy.env.snapRaster
			arcpy.env.snapRaster = ""
			tempEnvironment1 = arcpy.env.extent
			arcpy.env.extent = "2008480.2410905 751026.288687245 2056480.2410905 811226.288687245"
			tempEnvironment2 = arcpy.env.mask
			arcpy.env.mask = AnalysisRas
			arcpy.gp.FlowDirection_sa(DEM_Fill, DEM_fd, "NORMAL", Output_drop_raster)
			arcpy.env.snapRaster = tempEnvironment0
			arcpy.env.extent = tempEnvironment1
			arcpy.env.mask = tempEnvironment2

			# Process: Flow Accumulation
			tempEnvironment0 = arcpy.env.snapRaster
			arcpy.env.snapRaster = ""
			tempEnvironment1 = arcpy.env.extent
			arcpy.env.extent = "2008480.2410905 751026.288687245 2056480.2410905 811226.288687245"
			arcpy.gp.FlowAccumulation_sa(DEM_fd, DEM_fa, "", "FLOAT")
			arcpy.env.snapRaster = tempEnvironment0
			arcpy.env.extent = tempEnvironment1

			# Process: Raster Calculator
			tempEnvironment0 = arcpy.env.snapRaster
			arcpy.env.snapRaster = ""
			tempEnvironment1 = arcpy.env.extent
			arcpy.env.extent = DEM_fa
			arcpy.gp.RasterCalculator_sa("(\"%DEM_fa%\"*1600)/43560", Accum_acres)
			arcpy.env.snapRaster = tempEnvironment0
			arcpy.env.extent = tempEnvironment1

			# Process: Reclassify
			arcpy.gp.Reclassify_sa(Accum_acres, "Value", "0 776 NODATA;776 22536.638671875 1", Stream_Ras, "DATA")

			# Process: Stream to Feature
			arcpy.gp.StreamToFeature_sa(Stream_Ras, DEM_fd, Stream_Feat, "SIMPLIFY")

        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return

class ImpCov(object):
    def __init__(self):
        self.label = "Imperviousness Analysis"
        self.description = "Impervious area contributions"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Impervious Areas",
            name="ImperviousAreas",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Lakes",
            name="Lakes",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText))
			
			# -*- coding: utf-8 -*-
			# ---------------------------------------------------------------------------
			# Stream_Lab6_task3.py
			# Created on: 2016-03-08 15:51:45.00000
			#   (generated by ArcGIS/ModelBuilder)
			# Description: 
			# ---------------------------------------------------------------------------

			# Import arcpy module
			import arcpy


			# Local variables:
			Reclass_FA = "Reclass_FA"
			DEM_fd = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\DEM_fd"
			Impervious = "Impervious"
			Imperv_Ras = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Imperv_Ras"
			Imperv_Block = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Imperv_Block"
			Imperv_agg = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Imperv_agg"
			FA_weight = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\FA_weight"
			DEM_fa = "DEM_fa"
			FA_impervPerc = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\FA_impervPerc"
			Imperv_reclass = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Imperv_reclass"
			Imperv_mult = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Imperv_mult"
			Stream_FeatS3 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Stream_FeatS3"

			# Process: Feature to Raster
			arcpy.FeatureToRaster_conversion(Impervious, "LENGTH", Imperv_Ras, "4")

			# Process: Block Statistics
			arcpy.gp.BlockStatistics_sa(Imperv_Ras, Imperv_Block, "Rectangle 10 10 CELL", "SUM", "DATA")

			# Process: Aggregate
			arcpy.gp.Aggregate_sa(Imperv_Block, Imperv_agg, "10", "MEAN", "EXPAND", "DATA")

			# Process: Flow Accumulation
			arcpy.gp.FlowAccumulation_sa(DEM_fd, FA_weight, Imperv_agg, "FLOAT")

			# Process: Divide
			arcpy.gp.RasterCalculator_sa("(\"%FA_weight%\" / \"%DEM_fa%\")  /  100", FA_impervPerc)

			# Process: Reclassify
			arcpy.gp.Reclassify_sa(FA_impervPerc, "Value", "0 0.10000000000000001 1;0.10000000000000001 0.20000000000000001 2;0.20000000000000001 0.29999999999999999 3;0.29999999999999999 0.40000000000000002 4;0.40000000000000002 0.5 5;0.5 0.59999999999999998 6;0.59999999999999998 0.69999999999999996 7;0.69999999999999996 0.80000000000000004 8;0.80000000000000004 0.90000000000000002 9;0.90000000000000002 1 10", Imperv_reclass, "DATA")

			# Process: Multiply
			arcpy.gp.RasterCalculator_sa("\"%Reclass_FA%\" * \"%Imperv_reclass%\"", Imperv_mult)

			# Process: Stream to Feature
			arcpy.gp.StreamToFeature_sa(Imperv_mult, DEM_fd, Stream_FeatS3, "SIMPLIFY")

			
			# -*- coding: utf-8 -*-
			# ---------------------------------------------------------------------------
			# Stream_Lab6_task4.py
			# Created on: 2016-03-08 16:56:45.00000
			#   (generated by ArcGIS/ModelBuilder)
			# Description: 
			# ---------------------------------------------------------------------------

			# Import arcpy module
			import arcpy


			# Local variables:
			Accum_acres = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\Accum_acres"
			Cumilative_Drainage_Area_in_miles = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\CumDA_miles"
			Rural_flood-recurrence_100 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\floodRecur_100"
			Urban_flood-recurrence_100 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\urbanRecur100"
			Rural_flood-recurrence_50 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\floodRecur_50"
			Urban_flood-recurrence_50 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\urbanRecur_50"
			Rural_flood-recurrence_25 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\floodRecur_25"
			Urban_flood-recurrence_25 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\urbanRecur_25"
			Rural_flood-recurrence_10 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\floodRecur_10"
			Urban_flood-recurrence_10 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\urbanRecur_10"
			Rural_flood-recurrence_5 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\floodRecur_5"
			Urban_flood-recurrence_5 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\urbanRecur_5"
			FA_impervPerc = "FA_impervPerc"
			Rural_flood-recurrence_2 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\floodRecur_2"
			Urban_flood-recurrence_2 = "E:\\Senior Year\\Spring 2016\\ERE693\\Lab6\\Lab06Data.gdb\\urbanRecur_2"

			# Process: Acres to mi^2
			arcpy.gp.RasterCalculator_sa("\"%Accum_acres%\" * 0.0015625", Cumilative_Drainage_Area_in_miles)

			# Process: 719*DA^0.643
			arcpy.gp.RasterCalculator_sa("719 * ((\"%Cumilative Drainage Area in miles%\") ** 0.643)", Rural_flood-recurrence_100)

			# Process: 48.0*(DA^0.392)*(IA^0.358)*(RQ2^0.312)
			arcpy.gp.RasterCalculator_sa("48.0*((\"%Cumilative Drainage Area in miles%\") ** 0.392) * (( \"%FA_impervPerc%\") ** 0.358) * ((\"%Rural flood-recurrence 100%\") ** 0.312)", Urban_flood-recurrence_100)

			# Process: 581*DA^0.650
			arcpy.gp.RasterCalculator_sa("581 * ((\"%Cumilative Drainage Area in miles%\") ** 0.650)", Rural_flood-recurrence_50)

			# Process: 37.4*(DA^0.391)*(IA^0.396)*(RQ2^0.325)
			arcpy.gp.RasterCalculator_sa("37.4*((\"%Cumilative Drainage Area in miles%\") ** 0.391) * ((\"%FA_impervPerc%\") ** 0.396) *(( \"%Rural flood-recurrence 50%\") ** 0.325)", Urban_flood-recurrence_50)

			# Process: 467*DA^0.655
			arcpy.gp.RasterCalculator_sa("467 * ((\"%Cumilative Drainage Area in miles%\") ** 0.655)", Rural_flood-recurrence_25)

			# Process: 28.5*(DA^0.390)*(IA^0.436)*(RQ2^0.338)
			arcpy.gp.RasterCalculator_sa("28.5 * ((\"%Cumilative Drainage Area in miles%\") ** 0.390) * ((\"%FA_impervPerc%\") ** 0.436) * ((\"%Rural flood-recurrence 25%\") ** 0.338)", Urban_flood-recurrence_25)

			# Process: 334*DA^0.665
			arcpy.gp.RasterCalculator_sa("334 * ((\"%Cumilative Drainage Area in miles%\") ** 0.665)", Rural_flood-recurrence_10)

			# Process: 22.7*(DA^0.463)*(IA^0.515)*(RQ2^0.289)
			arcpy.gp.RasterCalculator_sa("22.7*((\"%Cumilative Drainage Area in miles%\") ** 0.463) * ((\"%FA_impervPerc%\") ** 0.515) * ((\"%Rural flood-recurrence 10%\") ** 0.289)", Urban_flood-recurrence_10)

			# Process: 248*DA^0.670
			arcpy.gp.RasterCalculator_sa("248 * ((\"%Cumilative Drainage Area in miles%\") ** 0.670)", Rural_flood-recurrence_5)

			# Process: 16.3*(DA^0.489)*(IA^0.572)*(RQ2^0.286)
			arcpy.gp.RasterCalculator_sa("16.3*((\"%Cumilative Drainage Area in miles%\") ** 0.489) * ((\"%FA_impervPerc%\") ** 0.572) * ((\"%Rural flood-recurrence 5%\") ** 0.286)", Urban_flood-recurrence_5)

			# Process: 144*DA^0.691
			arcpy.gp.RasterCalculator_sa("144 * ((\"%Cumilative Drainage Area in miles%\") ** 0.691)", Rural_flood-recurrence_2)

			# Process: 7.87*(DA^0.539)*(IA^0.686)*(RQ2^0.290)
			arcpy.gp.RasterCalculator_sa("7.87 * ((\"%Cumilative Drainage Area in miles%\") ** 0.539) * ((\"%FA_impervPerc%\") ** 0.686) * ((\"%Rural flood-recurrence 2%\") ** 0.290)", Urban_flood-recurrence_2)


			
			
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
class Runoff(object):
    def __init__(self):
        self.label = "Runoff Calculations"
        self.description = "Calculation of standard storm flows via USGS regression equations"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Curve Number",
            name="Landuse",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameter is %s" % (parameters[0].valueAsText))

        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
		
